<?php namespace ProcessWire;

/**
 * MatomoWire
 * This module adds embedding methods for Matomo (aka Piwik)
 *
 * @author blaueQuelle
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */
class MatomoWire extends WireData implements Module, ConfigurableModule
{

    public static function getModuleInfo()
    {
        return [
            'title' => "MatomoWire",
            'summary' => "This module adds embedding methods for Matomo (aka Piwik)",
            'author' => "blaueQuelle",
            'href' => "https://github.com/blaueQuelle/matomowire",
            'version' => 2,
            'autoload' => true,
            'singular' => true,
            'requires' => ["PHP>=7.2", "ProcessWire>=3.0.110"],
            'installs' => ["TextformatterMatomoWire"],
            'icon' => 'flask'
        ];
    }

    public function ready()
    {
        if (
            $this->wire('page')->template == 'admin' || // exclude admin pages
            $this->wire('page')->template == 'form-builder' || // exclude from form-builder iframe
            empty($this->matomo_url) // do nothing, when there is no matomo URL
        ) {
            return;
        }

        $this->addHookAfter('Page::render', $this, 'render');
    }

    public function ___getScriptTag()
    {
        $async = ($this->render_position == 'head') ? 'async' : '';

        if ($this->integrate_privacywire == true && $this->wire('modules')->isInstalled('PrivacyWire') && $this->wire('modules')->get('PrivacyWire')) {
            return '<script type="text/plain" data-type="text/javascript" data-category="' . $this->privacywire_cookie_category . '" ' . $async . '>';
        }

        return '<script type="text/javascript" ' . $async . '>';
    }

    public function ___getScriptContents()
    {
        return ($this->embedding_method == "tag") ? $this->getTagManagerScriptContents() : $this->getSiteScriptContents();
    }

    public function ___getTagManagerScriptContents()
    {
        $matomo_url = rtrim($this->wire('sanitizer')->url($this->matomo_url), '/') . '/';
        return 'var _mtm=window._mtm=window._mtm||[];_mtm.push({"mtm.startTime":(new Date().getTime()),"event":"mtm.Start"});var d=document,g=d.createElement("script"),s=d.getElementsByTagName("script")[0];g.type="text/javascript";g.async=true;g.src="' . $matomo_url . 'js/container_' . $this->container_id . '.js";s.parentNode.insertBefore(g,s);';
    }

    public function ___getSiteScriptContents()
    {
        $set_do_not_track = ($this->set_do_not_track == true) ? '_paq.push(["setDoNotTrack", true]);' : '';
        $disable_cookies = ($this->disable_cookies == true) ? '_paq.push(["disableCookies"]);' : '';
        $matomo_url = rtrim($this->wire('sanitizer')->url($this->matomo_url), '/') . '/';
        $site_id = $this->wire('sanitizer')->int($this->site_id);

        return 'var _paq=window._paq=window._paq||[];' . $set_do_not_track . $disable_cookies . '_paq.push(["trackPageView"]);_paq.push(["enableLinkTracking"]);(function(){var u="' . $matomo_url . '";_paq.push(["setTrackerUrl", u+"matomo.php"]);_paq.push(["setSiteId", "' . $site_id . '"]);var d=document,g=d.createElement("script"),s=d.getElementsByTagName("script")[0];g.type="text/javascript";g.async=true;g.src=u+"matomo.js";s.parentNode.insertBefore(g,s);})();';
    }


    public function ___render(HookEvent $event)
    {
        $replaceTag = ($this->render_position == "head") ? "</head>" : "</body>";

        $event->return = str_replace($replaceTag, "{$this->getScriptTag()}{$this->getScriptContents()}</script>{$replaceTag}", $event->return);
    }


    public function ___install()
    {
    }

    public function ___uninstall()
    {
    }

}
